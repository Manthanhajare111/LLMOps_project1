import sys
import os
from operator import itemgetter
from typing import List, Optional, Dict, Any
import streamlit as st
from langchain_core.messages import BaseMessage
from langchain_core.output_parsers import StrOutputParser
from langchain_core.prompts import ChatPromptTemplate
from langchain_community.vectorstores import FAISS
from langchain.chains.history_aware_retriever import create_history_aware_retriever
from langchain.chains.retrieval import create_retrieval_chain
from langchain.chains.combine_documents import create_stuff_documents_chain
from utils.model_loader import ModelLoader
from logger.custom_logger import CustomLogger
from excepctions.custom_exception import DocumentPortalException
from logger import GLOBAL_LOGGER as log
from prompt.prompt_lib import PROMPT_REGISTRY
from model.models import PromptType

from langchain_core.runnables.history import RunnableWithMessageHistory


class ConvsationalRAG:
    def __init__(self,session_id:str, retriever):
        try:
            self.log=CustomLogger().get_logger(__file__)
            self.session_id = session_id
            self.llm= self._load_llm()
            self.contextualize_prompt = PROMPT_REGISTRY[PromptType.CONTEXUALIZE_QUESTION.value]
            self.qa_prompt = PROMPT_REGISTRY[PromptType.CONTEXT_QA.value]
            self.history_aware_retriver = create_history_aware_retriever(
                self.llm,self.retriever,self.contextualize_prompt
            )
            self.log.info("Created a history-aware retriever",session_id=session_id)
            self.qa_chain = create_stuff_documents_chain(self.llm,self.qa_prompt)
            self.rag_chain = create_retrieval_chain(self.history_aware_retriver,self.qa_chain)
            self.log.info("Created RAG Chain",session_id=session_id)

            self.chain = RunnableWithMessageHistory(
                self.rag_chain,
                self._get_session_history,
                input_message = "input",
                history_message_key = "chat_history",
                output_message_key = "answer")
            
            self.log.info("Created RunnableWith message history",session_id=session_id)
        except Exception as e:
            log.error("Failed to initialize ConvsationalRAG",error=str(e))    
            raise DocumentPortalException("ConvsationalRAG Initialization Failed", sys)
        
    def _load_llm(self):
        try:
            llm = ModelLoader.load_llm()
            self.log.info("LLM loaded successfully",class_name= llm.__class__.__name__)
            return llm
        except Exception as e:
            log.error("Failed to load LLM",error=str(e))
            raise DocumentPortalException("LLM Loading Failed", sys)
        
    def _get_session_history(self):
        try:
            pass
        except Exception as e:
            log.error("Failed to get session history",error=str(e))
            raise DocumentPortalException("Session History Retrieval Failed", sys)
        
    def load_retriever(self,index_path:str):
        try:
            embedding = ModelLoader.load_embeddings()
            if not os.path.isdir(index_path):
                raise FileNotFoundError(f"FAISS index directory not found at {index_path}")
            
            vector_store = FAISS.load_local(index_path, embedding)
            self.log.info("FAISS index loaded successfully",index_path=index_path)
            return vector_store.as_retriever(search_type="similarity", search_kwargs={"k":3})

        except Exception as e:
            log.error("Failed to load retriever",error=str(e))
            raise DocumentPortalException("Retriever Loading Failed", sys)
        
    def invoke(self,user_input:str):
        try:
            response = self.chain.invoke({"input":user_input},
                                         config={"configurable:{session_id}":self.session_id})
            answer = response.get["answer","No answer"]
            if not answer:
                self.log.warning("No answer generated by the model",session_id=self.session_id)

            self.log.info("ConvsationalRAG invoked successfully",session_id=self.session_id,user_input=user_input,answer=answer[:150])
            return answer
        
        except Exception as e:
            log.error("Failed to invoke ConvsationalRAG",error=str(e),session_id=self.session_id)
            raise DocumentPortalException("ConvsationalRAG Invocation Failed", sys)